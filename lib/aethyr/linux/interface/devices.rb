############################################################################################################
module Aethyr

  ############################################################################################################
  module Linux
  
    ############################################################################################################
    module Interface
    
      ##########################################################################################################
      class Devices
  
        ######################################################################################################
        #### class methods
        class << self
  
          ########################################################################################################
          def find(type = :all, options = {})
            if type.eql?(:first)
            else
              self.find_all
            end
          end

        ######################################################################################################
        protected
    
          ##########################################################################################################
          def find_all
            rows = `ls -li /dev`.split("\n")
            rows.collect do |r|
              attrs = r.split(/\s+/)
              {
               :name => attrs[10], 
               :last_updated => "#{attrs[8]} #{attrs[9]}", 
               :major_number => attrs[6], 
               :minor_number => attrs[7], 
               :links => attrs[8], 
               :device_type => /^(\w).*/.match(attrs[2]).to_a.last, 
               :owner => attrs[4], 
               :group => attrs[5], 
               :i_node => attrs[1]}
            end.select{|r| r[:device_type].eql?('p') or r[:device_type].eql?('c') or (r[:device_type].eql?('b') and r[:name] !~ /^sd/)}          
          end
    
        ######################################################################################################
        end  
        
      ##########################################################################################################
      end
  
    ##########################################################################################################
    end

  ##########################################################################################################
  end
  
##########################################################################################################
end
