############################################################################################################
module Aethyr

  ############################################################################################################
  module Linux
  
    ############################################################################################################
    module Interface
    
      ##########################################################################################################
      class NetworkInterfaces
  
        ######################################################################################################
        #### class attributes
        @@services = nil
        
        ######################################################################################################
        #### class methods
        class << self
  
          ########################################################################################################
          def find(type = :all, options = {})
            if type.eql?(:first)
            else
              self.find_all
            end
          end
          
        ######################################################################################################
        protected
    
          ##########################################################################################################
          def find_all

            rows = `ifconfig -a`.split("\n")
            socks = {};
            rows.each do |r|
              attrs = r.split(/\s+/)
              next unless attrs[0] =~ /^(tcp|udp)/
              local = get_netstat_ip_and_port(attrs[3])
              remote = get_netstat_ip_and_port(attrs[4])
              socks[local[0]] = {:protocol => attrs[0], :local_ip => local[1], :local_port => local[2], :remote_ip => remote[1], 
                                 :remote_port => remote[2], :network_socket_state => attrs[5]}
            end

          end
        
        ######################################################################################################
        end  
        
      ##########################################################################################################
      end
  
    ##########################################################################################################
    end

  ##########################################################################################################
  end
  
##########################################################################################################
end
