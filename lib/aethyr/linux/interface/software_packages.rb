############################################################################################################
module Aethyr

  ############################################################################################################
  module Linux
  
    ############################################################################################################
    module Interface
    
      ##########################################################################################################
      class SoftwarePackages
  
        ######################################################################################################
        #### class methods
        class << self
  
          ########################################################################################################
          def find(type = :all, options = {})
            if type.eql?(:first)
            else
              self.find_all
            end
          end

        ######################################################################################################
        protected
    
          ##########################################################################################################
          def find_all

            pkgs = {}
            
            #### attributes other than description
            rows = `aptitude -w 300 -F "%p# %C# %M %t# %v# %V#" search '~i'`.split("\n")
            rows.each do |r|
              attrs = r.split(/\s+/)              
              pkg = self.send("build_hash_length_#{attrs.length}".to_sym, attrs)
              pkgs[pkg[:name]] = pkg
            end
            
            #### description
            rows = `aptitude -w 300 -F "%p# %d#" search '~i'`.split("\n")
            rows.each do |r|
              attrs = r.split(/\s+/)              
              pkgs[attrs[0]].update(:description => desc = attrs[1..attrs.length-1].join(' '))
            end

          end
    
          ##########################################################################################################
          def build_hash_length_8(attrs)
            {:ref_cnt => attrs[1], :flags => attrs[2], :socket_type => attrs[3], :state => attrs[4], :i_node => attrs[5], 
             :pid => get_netstat_pid(attrs[6])}
          end
    
        ######################################################################################################
        end  
        
      ##########################################################################################################
      end
  
    ##########################################################################################################
    end

  ##########################################################################################################
  end
  
##########################################################################################################
end
