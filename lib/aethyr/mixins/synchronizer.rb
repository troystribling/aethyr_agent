###########################################################################################################
#### Aethyr mixin for synchrozing models
###########################################################################################################
module Aethyr

  ########################################################################################################
  #### Mixins
  ########################################################################################################
  module Mixins

    ########################################################################################################
    #### Synchronizer
    ########################################################################################################
    module Synchronizer
  
      ########################################################################################################
      #### methods added to models
      ########################################################################################################
      module Model
      
        ######################################################################################################
        def self.included(base) 
          base.extend(ClassMethods)  
          base.send(:include, InstanceMethods)  
        end
                     
        ########################################################################################################
        #### model class methods
        ########################################################################################################
        module ClassMethods 
    
          ######################################################################################################
          def sync_key(params)
            params[:name]
          end
                     
          ######################################################################################################
          def synchronize(supporter, interface)
            local_models = self.find_local_models(supporter)
            begin
              remote_models = interface.find
              self.synchronize_models(supporter, local_models, remote_models, interface.credential)
              delete_models(local_models)
            rescue
              raise
            end
          end
      
          ######################################################################################################
          def find_local_models(supporter)
            models = {}
            supporter.find_supported_by_model(self, :all).each do |m|
              m.synched = false 
              models[m.sync_key] = m
            end
            models
          end
      
          ######################################################################################################
          def synchronize_models(supporter, local_models, remote_models, credential = nil) 
            remote_models.each do |params|
              synchronize_model(supporter, local_models, params, credential)
            end
          end
    
          ######################################################################################################
          def synchronize_model(supporter, local_models, params, credential = nil) 
            model_sync_key = self.sync_key(params)
            model = local_models[model_sync_key]
            if model.nil?
              model = self.new(params)
              model.add_associations(supporter)
              supporter.reload
            else 
              model.reload
              model.attributes = params
              model.synched = true
              model.save
            end
          end
    
          ######################################################################################################
          def delete_models(local_models)          
            local_models.each_value {|m| m.delete_model unless m.synched}
          end
    
        ########################################################################################################
        end #### ClassMethods
        ########################################################################################################
    
        ########################################################################################################
        #### model instance methods
        ########################################################################################################
        module InstanceMethods 
    
          ######################################################################################################
          def sync_key
            self.name
          end
  
          ####################################################################################################
          def credential
            self.supporter.to_descendant
          end
          
          ######################################################################################################
          def raise_association_missing(model, assoc, msg) 
            if assoc.nil?
              self.errors.add(model, msg)
              raise ActiveRecord::RecordInvalid.new(self)
            end
          end
  
          ######################################################################################################
          def delete_model
            self.delete!
            self.save
          end
    
        ########################################################################################################
        end #### InstanceMethods
        ########################################################################################################
  
      ########################################################################################################
      end #### Model
      ########################################################################################################
      
    ##########################################################################################################
    end #### Synchronizer
    ########################################################################################################

  ##########################################################################################################
  end #### Mixins
  ########################################################################################################

############################################################################################################
end #### Aethyr
############################################################################################################
